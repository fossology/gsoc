"use strict";(self.webpackChunkgosc=self.webpackChunkgosc||[]).push([[20672],{11185:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"2024/scheduler/index","title":"Introduction","description":"\x3c!--","source":"@site/docs/2024/scheduler/index.md","sourceDirName":"2024/scheduler","slug":"/2024/scheduler/","permalink":"/gsoc/docs/2024/scheduler/","draft":false,"unlisted":false,"editUrl":"https://github.com/fossology/gsoc/edit/main/docs/2024/scheduler/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Introduction","slug":"/2024/scheduler/"},"sidebar":"2024","previous":{"title":"Google Summer of Code Proposals 2024","permalink":"/gsoc/docs/2024/GSoC-projects"},"next":{"title":"week-04","permalink":"/gsoc/docs/2024/scheduler/updates/General/2024-05-30"}}');var r=i(74848),t=i(28453);const o={sidebar_position:1,title:"Introduction",slug:"/2024/scheduler/"},c=void 0,l={},a=[{value:"Author",id:"author",level:2},{value:"Contact info",id:"contact-info",level:2},{value:"Project title",id:"project-title",level:2},{value:"What&#39;s the project about?",id:"whats-the-project-about",level:2},{value:"Architecture Overview",id:"architecture-overview",level:3},{value:"What should be done?",id:"what-should-be-done",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"author",children:"Author"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/Aaditya-Singh78",children:"Aaditya Singh"})}),"\n",(0,r.jsx)(n.h2,{id:"contact-info",children:"Contact info"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"mailto:singh.aaditya889@gmail.com",children:"Email"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://linkedin.com/in/aadi-singh",children:"LinkedIn"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://twitter.com/__Aadityasingh",children:"Twitter"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"project-title",children:"Project title"}),"\n",(0,r.jsx)(n.p,{children:"Scheduler overhaul"}),"\n",(0,r.jsx)(n.h2,{id:"whats-the-project-about",children:"What's the project about?"}),"\n",(0,r.jsxs)(n.p,{children:["This project aims to enhance the job scheduling capabilities of ",(0,r.jsx)(n.a,{href:"https://github.com/fossology/fossology",children:"FOSSology"})," by transitioning from a C-based implementation to a Go-based system. The overhaul focuses on leveraging Go's modern language features to improve concurrency, performance, and maintainability. This transition addresses the scalability and system ",(0,r.jsx)(n.em,{children:"throughput"})," challenges in the current scheduler."]}),"\n",(0,r.jsx)(n.h3,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"C-architecture",src:i(11588).A+"",width:"765",height:"288"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The Current architecture"})," utilises the a multi-threaded approach to manage job scheduling & execution.It is structured around several key ",(0,r.jsx)(n.em,{children:"components"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Main Thread"}),": Acts as the scheduler's control unit, managing worker threads and overseeing system operations like resource allocation and health monitoring."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Job Execution Queue"}),": Holds and manages incoming job requests, facilitating efficient job processing and priority control."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Worker Threads"}),": Executes jobs from the queue under the main thread\u2019s management, optimizing resource use and performance."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Scheduler Logic"}),": Determines the execution order of jobs based on priority and resource availability, ensuring systematic and efficient processing."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Database Interaction"}),": Handles storage of job logs and results, supporting tracking, auditing, and data persistence."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Error Handling Mechanism"}),": Manages job execution errors to ensure stability and prevent system-wide impacts from failures."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Resource Allocation"}),": Distributes resources across jobs and threads to avoid contention and ensure efficient execution."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key Challenges"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Concurrency and Synchronization"}),": Ensuring that multiple worker threads operate without interfering with each other requires meticulous management of resources and synchronization."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Efficiency and Throughput"}),": The system must optimize the processing of jobs to minimize wait times and maximize the throughput of the scheduler."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Scalability"}),": As the number of jobs increases, the system must scale appropriately to handle the increased load without degradation in performance."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Flexibility"}),": Adapting to varied job types and changing operational conditions while maintaining performance and reliability."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"what-should-be-done",children:"What should be done?"}),"\n",(0,r.jsx)(n.p,{children:"What are the plans for the project?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Refactor Existing Code"}),": Transitioning the existing C codebase to Go, restructuring components to fit the Go idiom."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why Go?"})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Concurrency and Performance"}),": Go's native goroutine and channel-based concurrency model is highly efficient for processes that require concurrent execution, which is critical for job scheduling."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Memory Safety"}),": Automatic memory management and garbage collection in Go reduce the risk of memory-related errors, a common challenge in C due to its manual memory handling."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Simplicity and Productivity"}),": Go's clean and concise syntax, along with its powerful standard library, enables rapid development and easier maintenance compared to the verbose and complex C code."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Robust Tooling"}),": The Go toolchain provides out-of-the-box support for testing, formatting, and documentation, enhancing development workflow and product quality."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Cross-Platform Compatibility"}),": Go simplifies the build process with its strong support for cross-platform compilation, making it easier to manage and deploy on various systems without code changes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Optimize Concurrency Handling"}),": Implementing a robust concurrency model using goroutines and channels to handle multiple jobs efficiently."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How it would be achieved ?"})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"new scheduler architecture"})," will utilise:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"architecture",src:i(15517).A+"",width:"1097",height:"747"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Go Routines for Task Management"}),": Efficiently handling multiple jobs in parallel to optimize resource usage."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Channels for Communication"}),": Using channels to manage job queues and worker communication, ensuring thread-safe operations."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Modular Design"}),": Structuring the scheduler with clear separation of concerns, allowing for easier updates and maintenance."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["To ensure consistency and maintainability of the codebase, the following ",(0,r.jsx)(n.em,{children:"coding standards"})," will be applied:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Format and Style"}),": using ",(0,r.jsx)(n.code,{children:"gofmt"})," and ",(0,r.jsx)(n.code,{children:"golint"})," for formatting and linting the code."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Error Handling"}),": Follow Go's idiomatic way of error handling. Always check for errors where they can occur and handle them gracefully."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Commenting and Documentation"}),": Write clear comments for all public functions and methods, using Godoc conventions. Document all packages and provide examples where necessary."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Concurrency Practices"}),": Use goroutines and channels appropriately. Avoid common pitfalls like race conditions by using synchronization primitives from the ",(0,r.jsx)(n.code,{children:"sync"})," package when needed."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Testing"}),": Write comprehensive unit tests for all components using Go's built-in ",(0,r.jsx)(n.code,{children:"testing"})," package. Aim for a high level of test coverage to ensure reliability and facilitate future changes."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Enhance Error Handling"}),": Utilizing Go's built-in error handling to create a more reliable and fault-tolerant scheduler."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Integrate with Existing Systems"}),": Ensuring the new Go-based scheduler integrates seamlessly with the current FOSSology ecosystem."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test and Deploy"}),": Thoroughly test the new system for performance and reliability before full deployment."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Document the System"}),": Provide comprehensive documentation to support future development and use of the scheduler."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11588:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/c_arch-d1ca92e8b9c2cad3d510dabc21986f63.jpg"},15517:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/golang_arch-845b2fcaba867fd8c16c3061cf774283.png"},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(96540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);