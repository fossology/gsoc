"use strict";(self.webpackChunkgosc=self.webpackChunkgosc||[]).push([[76002],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},31832:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"2025/microservices-infrastructure/updates/2025-06-16","title":"Week 2","description":"\x3c!--","source":"@site/docs/2025/microservices-infrastructure/updates/2025-06-16.md","sourceDirName":"2025/microservices-infrastructure/updates","slug":"/2025/microservices-infrastructure/updates/2025-06-16","permalink":"/gsoc/docs/2025/microservices-infrastructure/updates/2025-06-16","draft":false,"unlisted":false,"editUrl":"https://github.com/fossology/gsoc/edit/main/docs/2025/microservices-infrastructure/updates/2025-06-16.md","tags":[{"inline":true,"label":"gsoc25","permalink":"/gsoc/docs/tags/gsoc-25"},{"inline":true,"label":"microservices","permalink":"/gsoc/docs/tags/microservices"},{"inline":true,"label":"infrastructure","permalink":"/gsoc/docs/tags/infrastructure"},{"inline":true,"label":"devops","permalink":"/gsoc/docs/tags/devops"}],"version":"current","frontMatter":{"title":"Week 2","author":"Muhammad Salman","author_url":"https://github.com/SalmanDeveloperz","tags":["gsoc25","microservices","infrastructure","devops"]},"sidebar":"2025","previous":{"title":"Week 1","permalink":"/gsoc/docs/2025/microservices-infrastructure/updates/2025-06-06"},"next":{"title":"Week 3","permalink":"/gsoc/docs/2025/microservices-infrastructure/updates/2025-06-23"}}');var t=s(74848),r=s(28453);const o={title:"Week 2",author:"Muhammad Salman",author_url:"https://github.com/SalmanDeveloperz",tags:["gsoc25","microservices","infrastructure","devops"]},l="Week 2",d={},c=[{value:"Continued Troubleshooting and Progress",id:"continued-troubleshooting-and-progress",level:2},{value:"Switching to bookworm-slim Base Image",id:"switching-to-bookworm-slim-base-image",level:2},{value:"Fixing Docker Build Issues",id:"fixing-docker-build-issues",level:2},{value:"Fixed the Web UI Issue",id:"fixed-the-web-ui-issue",level:2},{value:"All Docker Images Built &amp; Tested Successfully",id:"all-docker-images-built--tested-successfully",level:2},{value:"Database Connection Issue",id:"database-connection-issue",level:2},{value:"Meeting 2",id:"meeting-2",level:2},{value:"Meeting 2",id:"meeting-2-1",level:2},{value:"Meeting 3",id:"meeting-3",level:2},{value:"What I Tried to Fix the DB Issue",id:"what-i-tried-to-fix-the-db-issue",level:2},{value:"Planning Next Week",id:"planning-next-week",level:2}];function a(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"week-2",children:"Week 2"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"(June 10, 2025 - June 16, 2025)"})}),"\n",(0,t.jsx)(n.h2,{id:"continued-troubleshooting-and-progress",children:"Continued Troubleshooting and Progress"}),"\n",(0,t.jsx)(n.p,{children:"This week, I focused heavily on solving the issues from Week 1 and making solid progress in setting up the FOSSology microservices using Docker, Minikube and Kubernetes. It was a challenging week, filled with lots of debugging, learning and small victories that kept me motivated."}),"\n",(0,t.jsx)(n.h2,{id:"switching-to-bookworm-slim-base-image",children:"Switching to bookworm-slim Base Image"}),"\n",(0,t.jsxs)(n.p,{children:["Following ",(0,t.jsx)(n.a,{href:"https://github.com/shaheemazmalmmd",children:"Shaheem"}),"'s suggestion, I tried replacing the base image from ",(0,t.jsx)("code",{children:"buster-slim"})," to ",(0,t.jsx)("code",{children:" bookworm-slim "}),". I updated relevant dockerfiles like ",(0,t.jsx)(n.strong,{children:"Dockerfile.pkg"})," and started rebuilding everything."]}),"\n",(0,t.jsxs)(n.p,{children:["Unfortunately, this caused multiple compatibility issues. The builds were failing due to some outdated dependencies not working well with ",(0,t.jsx)("code",{children:"Bookworm"}),". After spending a lot of time debugging, I rolled back to ",(0,t.jsx)("code",{children:"buster-slim "})," to keep things stable and moving."]}),"\n",(0,t.jsx)(n.h2,{id:"fixing-docker-build-issues",children:"Fixing Docker Build Issues"}),"\n",(0,t.jsxs)(n.p,{children:["Some ",(0,t.jsx)("code",{children:".deb"})," files were missing, which broke the build process."]}),"\n",(0,t.jsxs)(n.p,{children:["I updated the ",(0,t.jsx)("code",{children:"debian/changelog"})," and adjusted the ",(0,t.jsx)(n.strong,{children:"Dockerfile.pkg"})," build context."]}),"\n",(0,t.jsxs)(n.p,{children:["I also handled merge conflicts while rebasing Omar\u2019s changes, mainly in ",(0,t.jsx)(n.strong,{children:"04-db-statefulset.yaml"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"fixed-the-web-ui-issue",children:"Fixed the Web UI Issue"}),"\n",(0,t.jsx)(n.p,{children:"At first, the web UI was showing the default Debian Apache2 page instead of the FOSSology interface. Here how it looks:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Debain Homescreen",src:s(49159).A+"",width:"1357",height:"645"})}),"\n",(0,t.jsx)(n.p,{children:"After digging through the Dockerfile, I found some path issues. I fixed the file paths and rebuilt the image. After that, the correct FOSSology interface started showing up."}),"\n",(0,t.jsx)(n.h2,{id:"all-docker-images-built--tested-successfully",children:"All Docker Images Built & Tested Successfully"}),"\n",(0,t.jsx)(n.p,{children:"I was able to build and test all the following Base images:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("code",{children:(0,t.jsx)(n.strong,{children:"packages"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("code",{children:(0,t.jsx)(n.strong,{children:"scheduler"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("code",{children:(0,t.jsx)(n.strong,{children:"web"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("code",{children:(0,t.jsx)(n.strong,{children:"ununpack"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("code",{children:(0,t.jsx)(n.strong,{children:"wget_agent"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("code",{children:(0,t.jsx)(n.strong,{children:"nomos"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("code",{children:(0,t.jsx)(n.strong,{children:"copyright"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)("code",{children:(0,t.jsx)(n.strong,{children:"ojo"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["I loaded them into Minikube and run :  ",(0,t.jsx)("code",{children:"kubectl apply -f k8s/"})]}),"\n",(0,t.jsxs)(n.p,{children:["I tested each container individually using ",(0,t.jsx)("code",{children:" kubectl get pods "})," and manual validation, except ",(0,t.jsx)(n.strong,{children:"web"})," and ",(0,t.jsx)(n.strong,{children:"db"})," pods, everything worked smoothly."]}),"\n",(0,t.jsxs)(n.p,{children:["Then I run: ",(0,t.jsx)("code",{children:"minikube service web"})," and this time the UI opened in the default browser showing Database connection issue."]}),"\n",(0,t.jsx)(n.h2,{id:"database-connection-issue",children:"Database Connection Issue"}),"\n",(0,t.jsx)(n.p,{children:"Even though everything else is working fine, I still couldn\u2019t get the FOSSology UI to connect to the database. Here\u2019s what\u2019s happening:"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("code",{children:"db-0"})," pod is stucked in ",(0,t.jsx)("code",{children:"Init:0/1"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Terminal DB Pod",src:s(49469).A+"",width:"1741",height:"969"})}),"\n",(0,t.jsxs)(n.p,{children:["Visiting ",(0,t.jsx)(n.a,{href:"http://192.168.49.2:30745/",children:"http://192.168.49.2:30745/"})," shows the ",(0,t.jsx)(n.strong,{children:"FOSSology Logo"})," displayed in browser tab but also showing:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:'"Could not connect to Fossology database"'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Database Connection Issue",src:s(44522).A+"",width:"1868",height:"1056"})}),"\n",(0,t.jsx)(n.h2,{id:"meeting-2",children:"Meeting 2"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"(June 11, 2025)"})}),"\n",(0,t.jsxs)(n.p,{children:["My mentor ",(0,t.jsx)(n.a,{href:"https://github.com/avinal",children:"Avinal"})," was out of the country and unavailable, so no meeting took place."]}),"\n",(0,t.jsx)(n.h2,{id:"meeting-2-1",children:"Meeting 2"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"(June 12, 2025)"})}),"\n",(0,t.jsxs)(n.p,{children:["I joined the weekly community meeting. I shared my progress like fixing the web UI (Debian homescreen issue) and building all Docker images, but I also laid out the database connection issue that\u2019s been a thorn in my side. They suggested the ",(0,t.jsx)(n.strong,{children:"PostgreSQL"})," problem might be a startup or installation and recommended trying ",(0,t.jsx)("code",{children:"/etc/init.d/postgres start"}),", which later didn\u2019t work in the pod environment."]}),"\n",(0,t.jsx)(n.h2,{id:"meeting-3",children:"Meeting 3"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"(June 14, 2025)"})}),"\n",(0,t.jsxs)(n.p,{children:["I had a very helpful 1-on-1 call with ",(0,t.jsx)(n.a,{href:"https://github.com/shaheemazmalmmd",children:"Shaheem"}),", where we tried to troubleshoot the database issue together."]}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s what we tried:-"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Running PostgreSQL locally:"})," ",(0,t.jsx)("code",{children:"psql -h localhost -p 5432 -U fossy"})]}),"\n",(0,t.jsx)(n.p,{children:"This worked perfectly. The PostgreSQL server was running and responding locally via the command line."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Confirmed DB Connection:"}),"\nFrom inside the container environment, PostgreSQL was also running and showing as connected."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Still Broken on Browser URL:"}),"\nDespite local success, the URL ",(0,t.jsx)(n.a,{href:"http://192.168.49.2:30745/",children:"http://192.168.49.2:30745/"})," still gave the database connection error."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Pods & Build Issues:"}),"\nWe realized that while the DB works locally, it fails inside ",(0,t.jsx)(n.strong,{children:"Kubernetes pods"})," due to something in the init container or service configuration. This was likely related to the startup order or network setup."]}),"\n",(0,t.jsx)(n.h2,{id:"what-i-tried-to-fix-the-db-issue",children:"What I Tried to Fix the DB Issue"}),"\n",(0,t.jsx)(n.p,{children:"I tried multiple fixes on my own to solve this:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Recreated the PersistentVolumeClaim (PVC) for the database"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Updated ",(0,t.jsx)(n.strong,{children:"00-configmap.yaml"})," and ",(0,t.jsx)(n.strong,{children:"01-db-secret.yaml"})," with proper values"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Added a readiness probe:\n",(0,t.jsx)("code",{children:'exec: [ "pg_isready", "-U", "postgres" ]'})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Increased the init script delay to ",(0,t.jsx)(n.strong,{children:"180 seconds"})," to give PostgreSQL time to boot"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Added detailed logging (",(0,t.jsx)("code",{children:"ps aux"}),", ",(0,t.jsx)("code",{children:"netstat"})," etc...) to trace what\u2019s running during startup"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Tried starting PostgreSQL manually using: ",(0,t.jsx)("code",{children:"/etc/init.d/postgres start"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"But this didn\u2019t work inside the pod environment."}),"\n",(0,t.jsx)(n.h2,{id:"planning-next-week",children:"Planning Next Week"}),"\n",(0,t.jsx)(n.p,{children:"For Week 3, I\u2019m ready to tackle these goals:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Crack the database connection issue by diving deeper into the db-0 pod\u2019s init container and getting PostgreSQL to start properly."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Keep an eye on pod logs and try out new configurations to hunt for a fix."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Test the scheduler to make sure it\u2019s good to go once the database is up and running."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Reach out to my mentors and community for more guidance and ideas."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},44522:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/databaseissue-3c2f66884b712a82d9ee3c4041d37909.png"},49159:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/debianscreen-77708752eb52219049b0ab1ff2836769.png"},49469:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/dbpodterminal-58261b572fc6c136f8e0e006ee1a4d33.png"}}]);