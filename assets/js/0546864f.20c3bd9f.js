"use strict";(self.webpackChunkgosc=self.webpackChunkgosc||[]).push([[47844],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var o=t(96540);const i={},s=o.createContext(i);function c(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(s.Provider,{value:n},e.children)}},41572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"2023/cyclonedx/updates/2023-08-03","title":"Week 10","description":"\x3c!--","source":"@site/docs/2023/cyclonedx/updates/2023-08-03.md","sourceDirName":"2023/cyclonedx/updates","slug":"/2023/cyclonedx/updates/2023-08-03","permalink":"/gsoc/docs/2023/cyclonedx/updates/2023-08-03","draft":false,"unlisted":false,"editUrl":"https://github.com/fossology/gsoc/edit/main/docs/2023/cyclonedx/updates/2023-08-03.md","tags":[],"version":"current","frontMatter":{"title":"Week 10","author":"Sushant Kumar"},"sidebar":"2023","previous":{"title":"Week 9","permalink":"/gsoc/docs/2023/cyclonedx/updates/2023-07-27"},"next":{"title":"Week 11","permalink":"/gsoc/docs/2023/cyclonedx/updates/2023-08-10"}}');var i=t(74848),s=t(28453);const c={title:"Week 10",author:"Sushant Kumar"},l=void 0,a={},r=[{value:"Updates:",id:"updates",level:3},{value:"Conclusion and further plans:",id:"conclusion-and-further-plans",level:3}];function d(e){const n={a:"a",em:"em",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"(August,03,2023)"})}),"\n",(0,i.jsx)(n.h3,{id:"updates",children:"Updates:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Throughout this week, my primary focus remained on enhancing the ScanCode agent."}),"\n",(0,i.jsx)(n.li,{children:"A significant concern with the agent is its current practice of invoking\nScanCode through the command line interface (CLI) for each individual file,\nleading to a file-by-file scanning process. Unfortunately, this resulted in a\nconsiderable amount of time being spent on bootstrapping ScanCode for each\nfile."}),"\n",(0,i.jsxs)(n.li,{children:["As a solution to this inefficiency, I explored a different approach. I\nattempted to leverage the ",(0,i.jsx)(n.a,{href:"https://github.com/nexB/scancode-toolkit/blob/develop/src/scancode/api.py",children:"ScanCode\nAPI"}),"\nto scan all files in a single call, consolidating the results into a unified\nlocation, potentially a JSON file."]}),"\n",(0,i.jsx)(n.li,{children:"The intended workflow involves storing the outcomes from the API call in a\ncentralized JSON file. Subsequently, the data extracted from the JSON results\nwill be efficiently populated into the database for each file during the upload\nprocess."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"conclusion-and-further-plans",children:"Conclusion and further plans:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In the coming weeks, I will try to implement the aforementioned workflow in\nFOSSology."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);