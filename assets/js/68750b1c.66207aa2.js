"use strict";(self.webpackChunkgosc=self.webpackChunkgosc||[]).push([[71939],{7960:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"2025/microservices-infrastructure/updates/2025-06-23","title":"Week 3","description":"\x3c!--","source":"@site/docs/2025/microservices-infrastructure/updates/2025-06-23.md","sourceDirName":"2025/microservices-infrastructure/updates","slug":"/2025/microservices-infrastructure/updates/2025-06-23","permalink":"/gsoc/docs/2025/microservices-infrastructure/updates/2025-06-23","draft":false,"unlisted":false,"editUrl":"https://github.com/fossology/gsoc/edit/main/docs/2025/microservices-infrastructure/updates/2025-06-23.md","tags":[{"inline":true,"label":"gsoc25","permalink":"/gsoc/docs/tags/gsoc-25"},{"inline":true,"label":"microservices","permalink":"/gsoc/docs/tags/microservices"},{"inline":true,"label":"infrastructure","permalink":"/gsoc/docs/tags/infrastructure"},{"inline":true,"label":"devops","permalink":"/gsoc/docs/tags/devops"}],"version":"current","frontMatter":{"title":"Week 3","author":"Muhammad Salman","author_url":"https://github.com/SalmanDeveloperz","tags":["gsoc25","microservices","infrastructure","devops"]},"sidebar":"2025","previous":{"title":"Week 2","permalink":"/gsoc/docs/2025/microservices-infrastructure/updates/2025-06-16"},"next":{"title":"Week 4","permalink":"/gsoc/docs/2025/microservices-infrastructure/updates/2025-06-30"}}');var r=n(74848),i=n(28453);const o={title:"Week 3",author:"Muhammad Salman",author_url:"https://github.com/SalmanDeveloperz",tags:["gsoc25","microservices","infrastructure","devops"]},d="Week 3",c={},l=[{value:"Challenges I Faced",id:"challenges-i-faced",level:2},{value:"What I Got Done",id:"what-i-got-done",level:2},{value:"Meeting 1",id:"meeting-1",level:2},{value:"Meeting 2",id:"meeting-2",level:2},{value:"Meeting 3",id:"meeting-3",level:2},{value:"Planning Next Week",id:"planning-next-week",level:2}];function a(e){const s={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"week-3",children:"Week 3"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"(June 17, 2025 - June 23, 2025)"})}),"\n",(0,r.jsx)(s.h2,{id:"challenges-i-faced",children:"Challenges I Faced"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Database Connection Trouble:"}),' The web pod was starting before the database is ready, showing "Could not connect to FOSSology database.']}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Reboot Glitch:"})," After a reboot, the UI sometimes reverted to the default Debian Apache screen."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Image Pull Issues:"})," Kubernetes couldn\u2019t grab the ",(0,r.jsx)("code",{children:"fossology/scheduler:3.11.0 "})," image from Docker Hub, causing ",(0,r.jsx)("code",{children:"ImagePullBackOff"})," errors."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Fixed Scheduler Build Error:"})," I ran into a ",(0,r.jsx)("code",{children:"no curl.h file"})," error while building the scheduler. I added ",(0,r.jsx)("code",{children:"libcurl4-openssl-dev"})," to ",(0,r.jsx)(s.strong,{children:"Dockerfile"})," and ",(0,r.jsx)(s.strong,{children:"Dockerfile.pkg"})," to fix it, so the scheduler could build properly."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Scheduler Pod Keeps Crashing:"})," The ",(0,r.jsx)(s.strong,{children:"scheduler"})," pod wass stucked in a ",(0,r.jsx)("code",{children:"CrashLoopBackOff"})," loop because of a PostgreSQL error: ",(0,r.jsx)("code",{children:"tables can have at most 1600 columns"})," when adding a new column to the license_candidate table. This happens during database updates and makes the pod crash every time it restarts."]}),"\n",(0,r.jsx)(s.h2,{id:"what-i-got-done",children:"What I Got Done"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Checked Database Connection:"})," I made sure the database was working:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Ran ",(0,r.jsx)("code",{children:"kubectl get svc"})," to see the database service on port ",(0,r.jsx)("code",{children:"5432:30543/TCP"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Used a debug pod with ",(0,r.jsx)("code",{children:"kubectl run -it --rm debug-pod --image=postgres --restart=Never -- bash"})," and connected with ",(0,r.jsx)("code",{children:"psql -h db -U fossy -d fossology"})," to confirm the database was up."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Tested with ",(0,r.jsx)("code",{children:"kubectl port-forward svc/db 5432:5432"})," and checked web pod settings with ",(0,r.jsx)("code",{children:"kubectl exec -it web-pod -- env | grep -i db"}),". Everything checked out locally!"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Debugged Kubernetes Pods:"})," I dug into the scheduler issues with:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"kubectl get pods"})," to spot ",(0,r.jsx)("code",{children:"CrashLoopBackOff"})," and ",(0,r.jsx)("code",{children:"ImagePullBackOff"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"kubectl logs scheduler-cf985bd75-tbf22"})," to check the error details."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)("code",{children:"kubectl rollout restart deployment scheduler"})," and ",(0,r.jsx)("code",{children:"kubectl delete pod scheduler-cf985bd75-tbf22"})," to restart the pod."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Built a custom scheduler Dockerfile and loaded it into Minikube to work around the image pull issue, though it\u2019s a temporary fix."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Fixed Web Pod Startup:"})," To stop the web pod from starting too early, I updated ",(0,r.jsx)("code",{children:"k8s/20-web-deployment.yaml"})," with a ",(0,r.jsx)("code",{children:"wait-for-db"})," section using BusyBox. It checks if the database is ready with ",(0,r.jsx)("code",{children:"nc -z $(FOSSOLOGY_DB_HOST) 5432"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["After running ",(0,r.jsx)("code",{children:"kubectl apply -f k8s/20-web-deployment.yaml"}),", the logs showed ",(0,r.jsx)(s.strong,{children:"\u201cFossology initialisation complete; Starting up...\u201d"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Cleared Database Issues:"})," To fix the PostgreSQL column error, I reset the database by running ",(0,r.jsx)("code",{children:"kubectl delete pod db-0, kubectl delete pvc database"}),", and ",(0,r.jsx)("code",{children:"kubectl apply -f k8s/"})," to start fresh."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Got the FOSSology UI Working:"})," I built the web pod with ",(0,r.jsx)("code",{children:"docker build -t fossology/web:3.11.0-fixed ."})," and the FOSSology UI popped up at ",(0,r.jsx)(s.a,{href:"http://192.168.49.2:30745",children:"http://192.168.49.2:30745"}),". Below are the ss of FOSSology UI."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"FOSSology UI Pic 1",src:n(39744).A+"",width:"1823",height:"978"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"FOSSology UI Pic 2",src:n(18075).A+"",width:"1873",height:"1007"})}),"\n",(0,r.jsx)(s.h2,{id:"meeting-1",children:"Meeting 1"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"(June 18, 2025)"})}),"\n",(0,r.jsxs)(s.p,{children:["I was supposed to meet with my mentor ",(0,r.jsx)(s.a,{href:"https://github.com/avinal",children:"Avinal"}),", but he was out of the country and couldn\u2019t make it. I shared a Google Docs link with my progress to keep him updated and we planned to catch up around June 22."]}),"\n",(0,r.jsx)(s.h2,{id:"meeting-2",children:"Meeting 2"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"(June 19, 2025)"})}),"\n",(0,r.jsxs)(s.p,{children:["I shared all my progress with the FOSSology team in community meeting, from getting the database connection working and the scheduler\u2019s ",(0,r.jsx)("code",{children:"ImagePullBackOff"})," error and building my own Dockerfile for temporary testing. I also talked about the web pod starting too early and the ",(0,r.jsx)("code",{children:"CrashLoopBackOff"})," issue. The mentors suggested trying ",(0,r.jsx)(s.strong,{children:"Helm Charts"})," to make deployments easier."]}),"\n",(0,r.jsx)(s.h2,{id:"meeting-3",children:"Meeting 3"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"(June 23, 2025)"})}),"\n",(0,r.jsxs)(s.p,{children:["I had an awesome call with my mentor ",(0,r.jsx)(s.a,{href:"https://github.com/avinal",children:"Avinal"}),". We went over everything: the FOSSology UI is up and running, most pods (like ",(0,r.jsx)("code",{children:"db-0"})," and ",(0,r.jsx)("code",{children:"web"}),") are working great, but the scheduler pod\u2019s ",(0,r.jsx)("code",{children:"CrashLoopBackOff"})," is messing with the upload and copyright features. We used ",(0,r.jsx)(s.strong,{children:"K9s"})," to check the pod logs and figure out what\u2019s causing the crashes. Together, we cleaned up some unnecessary changes and got a better understanding of how everything connects. We didn\u2019t fully fix the scheduler, but we end the call with a clear plan and tons of motivation!"]}),"\n",(0,r.jsx)(s.p,{children:"This week gave me a deeper understanding of Microservice deployments, container orchestration and Kubernetes troubleshooting. The UI loading successfully is the big win, but the scheduler pod still needs Running status."}),"\n",(0,r.jsx)(s.h2,{id:"planning-next-week",children:"Planning Next Week"}),"\n",(0,r.jsx)(s.p,{children:"For Week 4, I\u2019m ready to dive into:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Fix the scheduler pod\u2019s ",(0,r.jsx)("code",{children:"CrashLoopBackOff"})," issue and make sure the database updates work smoothly."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Work on getting all pods up and running properly and test the overall functionality on the FOSSology UI."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Once everything is stable, I\u2019ll test the upload and copyright features to confirm that all parts of FOSSology are working correctly."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"I also plan to clean up and finalize all proposed changes in the code."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"After resolving any conflicts and verifying the changes, I will commit and push the updates to get feedback from my mentors."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},18075:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/fossologyUI2-12fabeb91469ce27fc4748a3f626fc1f.png"},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>d});var t=n(96540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}},39744:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/fossologyUI1-b945322c07df63f0a79b4fe055a79972.png"}}]);