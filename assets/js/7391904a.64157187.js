"use strict";(self.webpackChunkgosc=self.webpackChunkgosc||[]).push([[14821],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},39569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"2023/cyclonedx/updates/2023-06-15","title":"Week 3","description":"\x3c!--","source":"@site/docs/2023/cyclonedx/updates/2023-06-15.md","sourceDirName":"2023/cyclonedx/updates","slug":"/2023/cyclonedx/updates/2023-06-15","permalink":"/gsoc/docs/2023/cyclonedx/updates/2023-06-15","draft":false,"unlisted":false,"editUrl":"https://github.com/fossology/gsoc/edit/main/docs/2023/cyclonedx/updates/2023-06-15.md","tags":[],"version":"current","frontMatter":{"title":"Week 3","author":"Sushant Kumar"},"sidebar":"2023","previous":{"title":"Week 2","permalink":"/gsoc/docs/2023/cyclonedx/updates/2023-06-08"},"next":{"title":"Week 4","permalink":"/gsoc/docs/2023/cyclonedx/updates/2023-06-22"}}');var o=t(74848),i=t(28453);const r={title:"Week 3",author:"Sushant Kumar"},c=void 0,a={},l=[{value:"Updates:",id:"updates",level:3},{value:"Conclusion and further plans:",id:"conclusion-and-further-plans",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"(June,15,2023)"})}),"\n",(0,o.jsx)(n.h3,{id:"updates",children:"Updates:"}),"\n",(0,o.jsx)(n.p,{children:"This week, my work on the project primarily involved three main components:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Researching and studying the details of CycloneDX reports:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"I explored into the CycloneDX schema, which helped me understand the\nspecific data that can and cannot be included in the reports generated by\nFOSSology."}),"\n",(0,o.jsx)(n.li,{children:"Additionally, I successfully mapped the required data fields between SPDX\nand CycloneDX reports."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Generating a CycloneDX report:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"I focused on generating the report in JSON format, and I accomplished this\ntask successfully."}),"\n",(0,o.jsx)(n.li,{children:"Here is an example of the report generated:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'    {\n        "bomFormat": "CycloneDX",\n        "specVersion": "1.4",\n        "version": 0,\n        "$schema": "https://cyclonedx.org/schema/bom/1.4/schema.json",\n        "serialNumber": "urn:uuid:BomRef.6-4881-a807-a47d-7.16459827",\n        "metadata": {\n            "timestamp": "2023-06-13T12:58:00+05:30",\n            "tools": [\n                {\n                    "vendor": "FOSSology",\n                    "name": "FOSSology",\n                    "version": "1.0.0"\n                }\n            ]\n        },\n        "components": [\n            {\n                "type": "file",\n                "name": "File 1",\n                "mime-type": "application/octet-stream",\n                "bom-ref": "ABCDEF123",\n                "supplier": {\n                    "name": "Supplier 1",\n                    "url": [],\n                    "contact": []\n                }\n                "scope": "required",\n                "hashes": [],\n                "licenses": [\n                    {\n                        "license": {\n                            "id": "License1",\n                            "name": "License 1",\n                            "text": {\n                                "content": "TGljZW5zZSB0ZXh0IDE=",\n                                "contentType": "text/plain",\n                                "encoding": "base64"\n                            },\n                            "url": "https://example.com/license1"\n                        },\n                        "expression": "License expression 1"\n                    },\n                    {\n                        "license": {\n                            "id": "License2",\n                            "name": "License 2",\n                            "text": {\n                                "content": "TGljZW5zZSB0ZXh0IDI=",\n                                "contentType": "text/plain",\n                                "encoding": "base64"\n                            },\n                            "url": "https://example.com/license2"\n                        },\n                        "expression": "License expression 2"\n                    }\n                ],\n                "copyright": "Copyright 1"\n            },\n            {\n                "type": "file",\n                "name": "File 2",\n                "mime-type": "application/octet-stream",\n                "bom-ref": "ABCDEF456",\n                "supplier": {\n                    "name": "Supplier 2",\n                    "url": [],\n                    "contact": []\n                },\n                "scope": "required",\n                "hashes": [],\n                "licenses": [\n                    {\n                        "license": {\n                            "id": "License3",\n                            "name": "License 3",\n                            "text": {\n                                "content": "TGljZW5zZSB0ZXh0IDM=",\n                                "contentType": "text/plain",\n                                "encoding": "base64"\n                            },\n                            "url": "https://example.com/license3"\n                        },\n                        "expression": "License expression 3"\n                    }\n                ],\n                "copyright": "Copyright 2"\n            }\n        ]\n    }\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"It's important to note that the data in the above report is not sourced\nfrom FOSSology. However, all the fields can be populated with data from\nthe FOSSology database."}),"\n",(0,o.jsxs)(n.li,{children:["The report primarily emphasizes the components of an upload. While the\n",(0,o.jsx)(n.a,{href:"https://cyclonedx.org/specification/overview/",children:"CycloneDX specification"}),"\nallows for various types of components such as ",(0,o.jsx)(n.code,{children:"Application"}),", ",(0,o.jsx)(n.code,{children:"Container"}),",\n",(0,o.jsx)(n.code,{children:"Device"}),", ",(0,o.jsx)(n.code,{children:"Library"}),", ",(0,o.jsx)(n.code,{children:"File"}),", ",(0,o.jsx)(n.code,{children:"Firmware"}),", ",(0,o.jsx)(n.code,{children:"Framework"}),", and ",(0,o.jsx)(n.code,{children:"Operating System"}),", we only need to include ",(0,o.jsx)(n.code,{children:"File"})," components in FOSSology reports."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Validating the report:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["I developed a simple PHP code that can be utilized to validate the report\nagainst the ",(0,o.jsx)(n.a,{href:"https://github.com/CycloneDX/cyclonedx-php-library/blob/master/res/schema/bom-1.4.SNAPSHOT.schema.json",children:"CycloneDX\nschema"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Here is the function that validates the report:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-PHP",children:"    function validateJSONAgainstSchema($jsonFile, $schemaFile)\n        {\n            $jsonString = file_get_contents($jsonFile);\n            $schemaString = file_get_contents($schemaFile);\n            \n            $jsonData = json_decode($jsonString);\n            $schemaData = json_decode($schemaString);\n            \n            $validator = new Validator();\n            $validator->validate($jsonData, $schemaData);\n            \n            if (!$validator->isValid()) {\n                $errors = array_map(function ($error) {\n                    return $error['property'] . ': ' . $error['message'];\n                }, $validator->getErrors());\n                \n                return $errors;\n            }\n            \n            return true;\n        }\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"conclusion-and-further-plans",children:"Conclusion and further plans:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"In the upcoming weeks, I will work on CycloneDX agent implementation in\nFOSSology."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);