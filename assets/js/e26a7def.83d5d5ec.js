"use strict";(self.webpackChunkgosc=self.webpackChunkgosc||[]).push([[80601],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var a=t(96540);const s={},i=a.createContext(s);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:n},e.children)}},32143:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/api_clearing_decision-be4efb3e51aee7d6a3bb61e2714e969a.jpeg"},33511:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/download_response-1fc1fede99cfcf413d30956b7aba99e0.png"},46232:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"2022/ui/updates/soham/2022-08-05","title":"Week 8 and 9","description":"\x3c!--","source":"@site/docs/2022/ui/updates/soham/2022-08-05.md","sourceDirName":"2022/ui/updates/soham","slug":"/2022/ui/updates/soham/2022-08-05","permalink":"/gsoc/docs/2022/ui/updates/soham/2022-08-05","draft":false,"unlisted":false,"editUrl":"https://github.com/fossology/gsoc/edit/main/docs/2022/ui/updates/soham/2022-08-05.md","tags":[{"inline":true,"label":"gsoc22","permalink":"/gsoc/docs/tags/gsoc-22"},{"inline":true,"label":"react","permalink":"/gsoc/docs/tags/react"},{"inline":true,"label":"API","permalink":"/gsoc/docs/tags/api"}],"version":"current","frontMatter":{"title":"Week 8 and 9","author":"Soham Banerjee","author_url":"https://github.com/soham4abc","author_image_url":"https://avatars.githubusercontent.com/u/63705023?v=4","tags":["gsoc22","react","API"]},"sidebar":"2022","previous":{"title":"Week 6 and 7","permalink":"/gsoc/docs/2022/ui/updates/soham/2022-08-01"},"next":{"title":"Week 10","permalink":"/gsoc/docs/2022/ui/updates/soham/2022-08-08"}}');var s=t(74848),i=t(28453);const o={title:"Week 8 and 9",author:"Soham Banerjee",author_url:"https://github.com/soham4abc",author_image_url:"https://avatars.githubusercontent.com/u/63705023?v=4",tags:["gsoc22","react","API"]},l=void 0,r={},d=[{value:"<code>uploads/&lt;uploadID&gt;/licenses</code> endpoint completed",id:"uploadsuploadidlicenses-endpoint-completed",level:2},{value:"PR link - feat(api): clearing status",id:"pr-link---featapi-clearing-status",level:3},{value:"Download file using UploadID",id:"download-file-using-uploadid",level:2},{value:"PR link - feat(api): Download file using UploadID",id:"pr-link---featapi-download-file-using-uploadid",level:3},{value:"Conclusion and Further Plans",id:"conclusion-and-further-plans",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"uploadsuploadidlicenses-endpoint-completed",children:[(0,s.jsx)(n.code,{children:"uploads/<uploadID>/licenses"})," endpoint completed"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"(August 14th, 2022)"})}),"\n",(0,s.jsxs)(n.p,{children:["Working on the ",(0,s.jsx)(n.code,{children:"uploads/<uploadID>/licenses"})," endpoint to return the latest clearing decision for each and every filepath completed this week.\nUsed ",(0,s.jsx)(n.code,{children:"ItemTreeBounds"})," to get the latest clearing decisions. Rather than using the seperate SQL qureies and modifications in the DAO files created seperate functions so that they can be reused and the funcionality of the earlier funtctions in the DAO files remain the same."]}),"\n",(0,s.jsx)(n.p,{children:"Was able to return the latest clearing status for each upload ID and return it in the api response:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"api_res",src:t(32143).A+"",width:"557",height:"270"})}),"\n",(0,s.jsxs)(n.p,{children:["The new function created in ",(0,s.jsx)(n.code,{children:"LicenseDao.php"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public function getLicensesAndTreeIdPerFileNameForAgentId(ItemTreeBounds $itemTreeBounds,\n                                                   $selectedAgentIds=null,\n                                                   $includeSubfolders=true,\n                                                   $excluding=\'\',\n                                                   $ignore=false,\n                                                   &$clearingDecisionsForLicList = array())\n  {\n    $uploadTreeTableName = $itemTreeBounds->getUploadTreeTableName();\n    $statementName = __METHOD__ . \'.\' . $uploadTreeTableName;\n    $param = array();\n\n    $condition = " (ufile_mode & (1<<28)) = 0";\n    if ($includeSubfolders) {\n      $param[] = $itemTreeBounds->getLeft();\n      $param[] = $itemTreeBounds->getRight();\n      $condition .= " AND lft BETWEEN $1 AND $2";\n      $statementName .= ".subfolders";\n    } else {\n      $param[] = $itemTreeBounds->getItemId();\n      $condition .= " AND realparent = $1";\n    }\n\n    if (\'uploadtree_a\' == $uploadTreeTableName) {\n      $param[] = $itemTreeBounds->getUploadId();\n      $condition .= " AND upload_fk=$".count($param);\n    }\n\n    $agentSelect = "";\n    if ($selectedAgentIds !== null) {\n      $statementName .= ".".count($selectedAgentIds)."agents";\n      $agentSelect = "WHERE agent_fk IS NULL";\n      foreach ($selectedAgentIds as $selectedAgentId) {\n        $param[] = $selectedAgentId;\n        $agentSelect .= " OR agent_fk = $".count($param);\n      }\n    }\n\n    $sql = "\nSELECT uploadtree_pk, ufile_name, lft, rgt, ufile_mode,\n       rf_shortname, agent_fk\nFROM (SELECT\n        uploadtree_pk, ufile_name,\n        lft, rgt, ufile_mode, pfile_fk\n      FROM $uploadTreeTableName\n      WHERE $condition) AS subselect1\nLEFT JOIN (SELECT rf_shortname,pfile_fk,agent_fk\n           FROM license_file, license_ref\n           WHERE rf_fk = rf_pk) AS subselect2\n  ON subselect1.pfile_fk = subselect2.pfile_fk\n$agentSelect\nORDER BY lft asc\n";\n\n    $this->dbManager->prepare($statementName, $sql);\n    $result = $this->dbManager->execute($statementName, $param);\n    $licensesPerFileName = array();\n\n    $row = $this->dbManager->fetchArray($result);\n    $pathStack = array($row[\'ufile_name\']);\n    $rgtStack = array($row[\'rgt\']);\n    $lastLft = $row[\'lft\'];\n    $path = implode(\'/\', $pathStack);\n    $uploadTreeId = $row[\'uploadtree_pk\'];\n    $this->addToLicensesAndTreeIdPerFileName($licensesPerFileName, $path, $row, $ignore, $clearingDecisionsForLicList, $uploadTreeId);\n    while ($row = $this->dbManager->fetchArray($result)) {\n      if (!empty($excluding) && false!==strpos("/$row[ufile_name]/", $excluding)) {\n        $lastLft = $row[\'rgt\'] + 1;\n        continue;\n      }\n      if ($row[\'lft\'] < $lastLft) {\n        continue;\n      }\n\n      $this->updateStackState($pathStack, $rgtStack, $lastLft, $row);\n      $path = implode(\'/\', $pathStack);\n      $this->addToLicensesAndTreeIdPerFileName($licensesPerFileName, $path, $row, $ignore, $clearingDecisionsForLicList, $uploadTreeId);\n    }\n    $this->dbManager->freeResult($result);\n    return array_reverse($licensesPerFileName);\n  }\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"pr-link---featapi-clearing-status",children:["PR link - ",(0,s.jsx)(n.a,{href:"https://github.com/fossology/fossology/pull/2288",children:"feat(api): clearing status"})]}),"\n",(0,s.jsx)(n.h2,{id:"download-file-using-uploadid",children:"Download file using UploadID"}),"\n",(0,s.jsxs)(n.p,{children:["Developed an API endpoint to send the file as a response for the respective ",(0,s.jsx)(n.code,{children:"UploadId"}),". The Api sends the file with their respective mimetype and file name which can be downloaded in the frontend.",(0,s.jsx)("br",{}),"\nCurrent status of the Download API response:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"api_res",src:t(33511).A+"",width:"1827",height:"838"})}),"\n",(0,s.jsxs)(n.h3,{id:"pr-link---featapi-download-file-using-uploadid",children:["PR link - ",(0,s.jsx)(n.a,{href:"https://github.com/fossology/fossology/pull/2309",children:"feat(api): Download file using UploadID"})]}),"\n",(0,s.jsx)(n.h3,{id:"conclusion-and-further-plans",children:"Conclusion and Further Plans"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implementing the Import Report functionality."}),"\n",(0,s.jsx)(n.li,{children:"Focussing on the Docs section and writing docs for the Final Evaluation."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);