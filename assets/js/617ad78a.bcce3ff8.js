"use strict";(self.webpackChunkgosc=self.webpackChunkgosc||[]).push([[22678],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},80117:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"2024/license-detection/updates/2024-07-04","title":"Week 6","description":"\x3c!--","source":"@site/docs/2024/license-detection/updates/2024-07-04.md","sourceDirName":"2024/license-detection/updates","slug":"/2024/license-detection/updates/2024-07-04","permalink":"/gsoc/docs/2024/license-detection/updates/2024-07-04","draft":false,"unlisted":false,"editUrl":"https://github.com/fossology/gsoc/edit/main/docs/2024/license-detection/updates/2024-07-04.md","tags":[],"version":"current","frontMatter":{"title":"Week 6","author":"Abdelrahman Jamal"},"sidebar":"2024","previous":{"title":"Week 5","permalink":"/gsoc/docs/2024/license-detection/updates/2024-06-27"},"next":{"title":"Week 7","permalink":"/gsoc/docs/2024/license-detection/updates/2024-07-11"}}');var s=t(74848),l=t(28453);const a={title:"Week 6",author:"Abdelrahman Jamal"},o="Meeting 6",r={},c=[{value:"Attendees:",id:"attendees",level:2},{value:"Discussion:",id:"discussion",level:2},{value:"Integration of Semantic Search with LLMs",id:"integration-of-semantic-search-with-llms",level:3},{value:"Revised Approach",id:"revised-approach",level:3},{value:"Key Findings",id:"key-findings",level:3},{value:"Conclusions and Next Steps",id:"conclusions-and-next-steps",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"meeting-6",children:"Meeting 6"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"(July 4,2024)"})}),"\n",(0,s.jsx)(n.h2,{id:"attendees",children:"Attendees:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/Kaushl2208",children:"Kaushlendra Pratap"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/shaheemazmalmmd",children:"Shaheem Azmal M MD"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/hastagAB",children:"Ayush Bhardwaj"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/avinal",children:"Avinal Kumar"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"discussion",children:"Discussion:"}),"\n",(0,s.jsx)(n.h3,{id:"integration-of-semantic-search-with-llms",children:"Integration of Semantic Search with LLMs"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Initial Attempt"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Prompt: The initial prompt focused on providing text and metadata to the LLM for license identification."}),"\n",(0,s.jsx)(n.li,{children:"Issues: The LLM attempted to match all provided lines to a license, even when many lines were clearly irrelevant to licensing."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Initial Prompt"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[Task]\nYou are provided with text extracted from a file, along with potential license matches identified by a semantic search tool.\nYour task is to carefully analyze the provided text and metadata to determine the actual software license(s) present in the original file.\nOut of the 10 provided lines, not all matches will be correct or relevant, so focus on the most relevant lines in your analysis.\n\n[Metadata Explanation]\nThe metadata provided for each line is a tuple containing four elements:\n  * **Line:** The actual line of text extracted from the file.\n  * **Potential License Match:** The name of a license that the semantic search tool believes the line might belong to.\n  * **License ID:** The SPDX identifier of the potential license match.\n  * **Matched License Text:** The specific text within the potential license that the line was matched to.\n\n[Guidelines]\n1. **License Identification:** If a license is found, clearly state its name and its corresponding SPDX identifier (e.g., MIT License, SPDX-License-Identifier: MIT). If multiple licenses are found, list them all.\n2. **Evidence and Reasoning (Focus on Relevance and Clarity):**\n  * For each identified license, extract the specific text snippet(s) from the provided text that confirm its presence. Include surrounding context if it helps clarify the license's applicability. Prioritize the most relevant lines of text.\n  * Explain why the identified license is the most likely match, taking into account the potential license matches and the matched license text provided in the metadata.\n  * Only consider matches that are clear and obviously correct. The semantic search tool will always attempt to match lines to licenses, but these matches are not always accurate.\n3. **Override Semantic Search:** If the semantic search tool's suggested match seems incorrect, feel free to disregard it and rely on your own knowledge and analysis to determine the correct license. Provide a clear explanation of why you chose a different license.\n4. **Exclude Irrelevant Information:**\n  * Disregard copyright notices and statements and lines of code as they do not indicate the software license.\n  * Focus only on text that is found in licenses or clearly identifies licenses.\n5. **No License Scenario:** If no license is detected in the text, explicitly state \"No software license found.\"\n6. **Ambiguity:** If the license cannot be confidently determined due to ambiguity or conflicting information, clearly state this and provide an explanation.\n7. **Response Format:** Provide the results in the following format:\n  * **Licenses = [list of identified licenses]**\n  * **SPDX-IDs = [list of corresponding SPDX identifiers]**\n\n  If no licenses are found, both lists should be empty:\n  * **Licenses = []**\n  * **SPDX-IDs = []**\n\n[Text and Metadata]\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Outcome: The LLM tried too hard to relate irrelevant lines to licenses, resulting in many false positives."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"revised-approach",children:"Revised Approach"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Second Attempt"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prompt: Changed the task to identify relevant lines before determining licenses."}),"\n",(0,s.jsx)(n.li,{children:"Issues: Reduced the number of irrelevant lines identified, but the problem of false positives persisted."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Second Prompt"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[Task]\nFrom the following tuples, select those that are relevant to software licensing and ignore the rest.\nA relevant tuple is a tuple that contains a line of text that is relevant and can be used to identify a license.\n\n[Tuples]\nEach tuple consists of three elements:\n  1. **Line:** The actual line of text extracted from the file. This is the element you need to evaluate for relevance to software licensing.\n  2. **Potential License Match:** The name of a license that the semantic search tool suggests the line might belong to (provided for reference).\n  3. **License ID:** The SPDX identifier of the potential license match (provided for reference).\n\n[Guidelines]\n1. **Select License-Specific Lines:** Choose only lines that:\n  * Explicitly mention license terms\n  * Directly quote from known license texts\n  * Include specific license references or titles.\n\n2. **Ignore Irrelevant Lines:**\n  * Disregard lines that do not explicitly mention license terms.\n  * Ignore copyright notices, code snippets, comments, and general documentation.\n  * Ignore code documentation lines that seem to be documenting code or just general instructions or information.\n  * Do not select lines that are general descriptions, code, or comments unrelated to license terms.\n\n3. **No License:** If no license is found, state "No software license found."\n4. **Ambiguity:** If uncertain, explain the ambiguity.\n5. **Response Format:**\n  * **Relevant Lines = [list of relevant lines]**\n  * **Licenses = [list of identified licenses from relevant lines]**\n  * **SPDX-IDs = [list of corresponding SPDX identifiers from relevant lines]**\n\n[Text and Metadata]\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Outcome: The LLM still included irrelevant lines in its output, indicating a persistent issue with following the prompt guidelines."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-findings",children:"Key Findings"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Performance Issues: Despite detailed prompts, the LLMs struggled to correctly identify relevant lines and accurately match licenses."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"RAG Exploration: Suggested by Kaushl, Retrieval-Augmented Generation (RAG) may provide a more robust solution to improve accuracy in license identification."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusions-and-next-steps",children:"Conclusions and Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Improve Semantic Search: Continue refining the semantic search approach for better initial filtering of potential license lines."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"RAG Implementation: Investigate and implement RAG to enhance the LLM's ability to accurately identify relevant lines and match licenses."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Further Prompt Engineering: Experiment with additional prompt variations to improve LLM performance."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Performance Metrics: Establish metrics to evaluate the effectiveness of the integrated approach and analyze the results for further improvements."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);