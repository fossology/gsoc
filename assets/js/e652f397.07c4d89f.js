"use strict";(self.webpackChunkgosc=self.webpackChunkgosc||[]).push([[4466],{15403:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>h,default:()=>a,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"2025/text-phrases-bulk/updates/2025-06-17","title":"Week 3","description":"\x3c!--","source":"@site/docs/2025/text-phrases-bulk/updates/2025-06-17.md","sourceDirName":"2025/text-phrases-bulk/updates","slug":"/2025/text-phrases-bulk/updates/2025-06-17","permalink":"/gsoc/docs/2025/text-phrases-bulk/updates/2025-06-17","draft":false,"unlisted":false,"editUrl":"https://github.com/fossology/gsoc/edit/main/docs/2025/text-phrases-bulk/updates/2025-06-17.md","tags":[{"inline":true,"label":"gsoc25","permalink":"/gsoc/docs/tags/gsoc-25"}],"version":"current","frontMatter":{"title":"Week 3","author":"Harshit Gandhi","tags":["gsoc25"]},"sidebar":"2025","previous":{"title":"Week 2","permalink":"/gsoc/docs/2025/text-phrases-bulk/updates/2025-06-10"},"next":{"title":"Week 4","permalink":"/gsoc/docs/2025/text-phrases-bulk/updates/2025-06-24"}}');var i=s(74848),l=s(28453);const r={title:"Week 3",author:"Harshit Gandhi",tags:["gsoc25"]},h="Week 3",o={},d=[{value:"Meeting 1",id:"meeting-1",level:2},{value:"Summary:",id:"summary",level:3},{value:"Progress:",id:"progress",level:2},{value:"Issues I found in the Pull Request by Aditya",id:"issues-i-found-in-the-pull-request-by-aditya",level:3}];function c(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"week-3",children:"Week 3"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"(June 17, 2025 \u2013 June 23, 2025)"})}),"\n",(0,i.jsx)(n.h2,{id:"meeting-1",children:"Meeting 1"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Date:"})," June 17, 2025",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Attendees:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/harshitg927",children:"Harshit Gandhi"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/Kaushl2208",children:"Kaushlendra"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/its-sushant",children:"Sushant"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/soham4abc",children:"Soham"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"summary",children:"Summary:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Presented the ongoing development of a new page under ",(0,i.jsx)(n.strong,{children:"Admin \u2192 Text Management"}),", designed to let users manage custom text phrases associated with existing license texts from the ",(0,i.jsx)(n.code,{children:"license_ref"})," table. This functionality involves a newly created ",(0,i.jsx)(n.code,{children:"custom_phrase"})," table."]}),"\n",(0,i.jsx)(n.li,{children:"Discussed where and how the option to activate the new agent should be made available to users."}),"\n",(0,i.jsx)(n.li,{children:"Mentors brought attention to a pull request submitted by a new contributor related to my project."}),"\n",(0,i.jsx)(n.li,{children:"We discussed strategies for integrating the contributor\u2019s work into the project."}),"\n",(0,i.jsx)(n.li,{children:"Soham recommended that I thoroughly review the PR and document any issues or suggestions related to the submitted code."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"progress",children:"Progress:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Engaged with mentors to discuss the pull request submitted for my project and shared detailed concerns regarding areas where the implementation was lacking."}),"\n",(0,i.jsx)(n.li,{children:"Attempted to fix the issues within the pull request but encountered challenges in successfully resolving them."}),"\n",(0,i.jsx)(n.li,{children:"Conducted a thorough review of the submitted code to evaluate which parts could be reused or adapted for the project moving forward."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"issues-i-found-in-the-pull-request-by-aditya",children:"Issues I found in the Pull Request by Aditya"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Incorrect plugin registeration","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"File: plugin.php"}),"\n",(0,i.jsx)(n.li,{children:"Using register method on $textPhrasePlugin which does not exist"}),"\n",(0,i.jsx)(n.li,{children:"Solution: Use global register_plugin() function."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Missing required class imports","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TextPhrasePlugin.php"}),"\n",(0,i.jsxs)(n.li,{children:["Missing imports include:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"use Fossolohg/Lib/Auth/Auth"}),"\n",(0,i.jsx)(n.li,{children:"use Symfony/component/HttpFoundation/Request"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Solution: Make the necessary imports"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Missing template file","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"edit.html.twig"}),"\n",(0,i.jsx)(n.li,{children:"Solution: create the template file"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Incorrect Method Parameter Handling","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TextPhrasePlugin.php"}),"\n",(0,i.jsx)(n.li,{children:"handle() method use old-style parameter handling"}),"\n",(0,i.jsx)(n.li,{children:"Issue: handle() method should accept Request $request"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"The to be created text_phrases table has to be manually create by the user. But, this should be integreated with the existing FOSSology build process"}),"\n",(0,i.jsxs)(n.li,{children:["Inconsistent Container Access","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"File: TextPhrasePlugin.php"}),"\n",(0,i.jsx)(n.li,{children:'Problem: uneccessary use of $GLOBALS["container"]'}),"\n",(0,i.jsx)(n.li,{children:"Solution: should use $this->getObject method which is already present in DefaultPlugin.php"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Missing template in CMakeList.txt","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"missing upload_options.html.twig and edit.html.twig template in CMakeList.txt"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Missing AGENT_REV constant definition","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Files: textphrase_agent.php, TextPhraseDecider.php"}),"\n",(0,i.jsx)(n.li,{children:"Both files use AGENT_REV constant but it's not defined anywhere in the textphrase module"}),"\n",(0,i.jsx)(n.li,{children:'Solution: Create a version.php file with define("AGENT_REV", "c1d32f"); similar to other agents'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Missing Auth class import","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"File: TextPhraseDecider.php"}),"\n",(0,i.jsx)(n.li,{children:"uses Auth::getUserId() but no import statement for Auth class"}),"\n",(0,i.jsx)(n.li,{children:"Solution: Add use Fossology\\Lib\\Auth\\Auth; at the top of the file"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Inconsistent Container Access in Agent Classes","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Files: textphrase_agent.php, TextPhraseDecider.php"}),"\n",(0,i.jsx)(n.li,{children:"Problem: Direct usage of $GLOBALS['container'] to access services"}),"\n",(0,i.jsx)(n.li,{children:"Solution: Should use dependency injection or getter methods from base Agent class"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Non-existent insertDecision method","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"File: TextPhraseDecider.php"}),"\n",(0,i.jsx)(n.li,{children:"Line 125 calls $this->licenseDao->insertDecision($decision) but this method doesn't exist in LicenseDao"}),"\n",(0,i.jsx)(n.li,{children:"Solution: Use proper clearing decision API or implement the missing method"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Missing processUploadId method implementation","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"File: textphrase_agent.php"}),"\n",(0,i.jsx)(n.li,{children:"Method processUploadId() exists but should be called by parent Agent class through proper job scheduling"}),"\n",(0,i.jsx)(n.li,{children:"Issue: The method is implemented but not integrated with FOSSology's agent scheduling system"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Missing agent registration in CMakeLists.txt","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"File: CMakeLists.txt"}),"\n",(0,i.jsx)(n.li,{children:"Missing proper agent registration for scheduler integration"}),"\n",(0,i.jsx)(n.li,{children:"Solution: Add proper agent registration commands for FOSSology build system"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"After this detailed review of the pull request, I concluded that it would be better to continue the work I have already done on my end."})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>h});var t=s(96540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);